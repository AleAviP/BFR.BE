library(ggplot2)
library(reshape2)
library(Hmisc)
library(plyr)

#Plots Toy Examples
plot.heat = function(X){
  X = as.matrix(X)
  x = melt(X)
  p_X_heat = ggplot(data = x, aes(x=X2, y=-X1, fill=value)) +
    theme_bw() +  
    geom_tile(show.legend = F) + 
    #geom_tile() + 
    xlab("q") +
    ylab("p") #+
    #scale_fill_gradient2(limits=c(-20, 20))
  return(p_X_heat)
}

plot.scat = function(X,X_recons){
  X_scat = data.frame(true=c(X),reconstruction=c(X_recons))
  p_X = ggplot(X_scat,aes(x=true,y=reconstruction))+geom_point(color="darkgrey",alpha=0.075) + #geom_point(color="cadetblue3",alpha=0.075) +
    theme_bw() + 
    geom_abline(slope = 1,linetype=2)+ 
    theme(axis.title=element_text(size=15,face="bold"))
  return(p_X)
}

plot.hist = function(X,X_recons,normal=FALSE){
  X_dif = data.frame(difference=c(X-X_recons))
  p1 = ggplot(X_dif, aes(x=difference))+ 
    geom_histogram(aes(y = ..density..,fill=..count..),binwidth = 0.25)+ 
    ggtitle("Histogram") +
    theme_bw()+ 
    theme(axis.title=element_text(size=15,face="bold"))
  if (normal==TRUE){
    p1 = p1+stat_function(fun=function(x) dnorm(x), linetype=1, colour="dark blue", size =1.25)
  }
  return(p1)
}

plot.trace = function(X,X_recons){
  XPlot = X_recons
  for (i in 1:ncol(X_recons)){
    XPlot[,i] = X_recons[,i]/X[i]
  }
  meltXplot <- melt(XPlot)
  p_X = ggplot(meltXplot,aes(x=Var1,y=value,colour=as.factor(Var2),group=Var2)) + geom_line(size =1.5)+
    theme_bw() +
    xlab("Iteration") +  theme(legend.position="none") +ylab("Parameter estimation / True Parameter")
}

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}


  
plots.FA = function(FA, X, V, Z, M, Theta,E,Psi, B=0, hyper,varianceBE=FALSE){
  FA$Psi=FA$sigma
  FA$tracePsi=FA$tracesigma
  FA$Ez = t(FA$Ez)
  n = nrow(X)
  p = nrow(FA$M)
  q = ncol(FA$M)
  p_v = ncol(V)
  p_b = ifelse(varianceBE==TRUE,ncol(Psi),1)
  w_b = ifelse(varianceBE==TRUE,apply(B,2,sum)/n,1)
  

  #Ordering data
  Xorder = list()
  Vorder = list()
  Zorder = list()
  Eorder = list()
  if(varianceBE==TRUE){
    for (i in 1:p_b){
        Xorder[[i]] = X[c(1:n)[B[,i]==1],]
        Vorder[[i]] = V[c(1:n)[B[,i]==1],]
        Zorder[[i]] = Z[c(1:n)[B[,i]==1],]
        Eorder[[i]] = E[c(1:n)[B[,i]==1],]
    }
    #Z = do.call("rbind", Zorder)
    X_o = do.call("rbind", Xorder)
    V_o = do.call("rbind", Vorder)
    E_o = do.call("rbind", Eorder)
  }
  else{
  FA$Psi = diag(FA$Psi)
  Z = Z
  X_o = X
  V_o = V
  E_o = E
  }
    
    Z = Z
    X_o = X
    V_o = V
    E_o = E
  
  X_recons = t(FA$Ez) %*% t(FA$M)+V%*%t(FA$Theta)
  X_NoError = Z %*% t(M)+ V%*%t(Theta)
  X_recons_o = t(FA$Ez) %*% t(FA$M)+V_o%*%t(FA$Theta)
  rownames(X_recons)<- NULL
  rownames(X_recons_o)<- NULL
  
  #Loglikelihood
  # trace_logike = vector()
  # for (i in 1:FA$iterations){
  #   theta = matrix(ncol=p_v,FA$traceTheta[i,])
  #   M_rec = matrix(ncol=q,FA$traceM[i,])
  #   if(varianceBE==TRUE){
  #     trace_logike[i] = 0
  #     for (j in 1:p_b){
  #       Sigma = FA$tracePsi[i,((j-1)*p+1):(j*p)]
  #       trace_logike[i] = trace_logike[i] + likelihoodFA(Xorder[[j]]-Vorder[[j]]%*%t(theta),M_rec,diag(Sigma)) 
  #     }
  #   }
  #   else{
  #     Sigma = FA$tracePsi[i,]
  #     trace_logike[i] = likelihoodFA(X-V%*%t(theta),M_rec,Sigma) 
  #   }
  # }
  like_true = 0
  if(varianceBE==TRUE){
    for (i in 1:p_b){
      Sigma = Psi[,i]
      like_true = like_true + likelihoodFA(Xorder[[i]]-Vorder[[i]]%*%t(Theta),M,diag(Sigma))
    }
  }else{
    like_true = likelihoodFA(X-V%*%t(Theta),M,Psi)
  }
  plot_l=data.frame(loglike = FA$like,iteration = c(1:FA$iterations))
  p_l = ggplot(plot_l, aes(x=iteration, y=loglike)) + geom_line(color="cadetblue3", size =1.5) +
    theme_bw()+
    #labs(title="Loglikelihood EM") +
    xlab("iteration") +
    ylab("loglikelihood") +
    geom_hline(yintercept=like_true,color="indianred3",linetype=2, size =1.5)+ 
    theme(axis.title=element_text(size=15,face="bold"))+
    theme(plot.title = element_text(hjust = 0.5))
  
  #Logprior
  plot_prior=data.frame(logprior = FA$prior,iteration = c(1:FA$iterations))
  p_prior = ggplot(plot_prior, aes(x=iteration, y=logprior)) + geom_line(color="cadetblue3", size =1.5) +
    theme_bw()+
    #labs(title="Logprior EM") +
    xlab("iteration") +
    ylab("logprior") + 
    theme(axis.title=element_text(size=15,face="bold"))+
    theme(plot.title = element_text(hjust = 0.5))
  
  #Logpost
  plot_post=data.frame(logpost = FA$prior+FA$like,iteration = c(1:FA$iterations))
  p_post = ggplot(plot_post, aes(x=iteration, y=logpost)) + geom_line(color="cadetblue3", size =1.5) +
    theme_bw()+
    #labs(title="Logposterior EM")+
    geom_hline(yintercept=like_true,color="indianred3",linetype=2, size =1.5) +
    xlab("iteration") +
    ylab("logposterior") + 
    theme(axis.title=element_text(size=15,face="bold"))+
    theme(plot.title = element_text(hjust = 0.5))
  
  #All
  plot_all=data.frame(logpost = FA$prior+FA$like,loglikelihood=FA$like, iteration = c(1:FA$iterations))
  plot_all<- melt(plot_all, id="iteration")
  p_all = ggplot(data=plot_all,
                  aes(x=iteration, y=value, colour=variable)) +
    scale_color_manual(values=c("#00CCCC", "#666699")) + #Hexadecimal color code chart
    geom_line(size=1.5) + 
    theme_bw()+
    #labs(title="Loglikelihood EM") +
    geom_hline(yintercept=like_true,color="indianred3",linetype=2, size =1.5)+
    xlab("iteration") +
    theme(axis.title=element_text(size=15,face="bold"))+
    theme(plot.title = element_text(hjust = 0.5))
  #Scatterplots
  #ZM
  p_ZM = plot.scat(Z%*%t(M),t(FA$Ez)%*%t(FA$M)) +
    xlab(expression(paste(ZM,"'")))+
    ylab(expression(paste(hat(Z), hat(M),"'")))+
    theme(plot.title = element_text(hjust = 0.5))
  #X
  p_X = plot.scat(X,X_recons)+
    xlab(expression(paste(ZM,"'",+v, theta,"'",+epsilon)))+
    ylab(expression(paste(hat(Z), hat(M),"'",+v, hat(theta),"'")))+
    theme(plot.title = element_text(hjust = 0.5))
  #ZM+Vtheta
  p_X_NE = plot.scat(X_NoError,X_recons)+
    xlab(expression(paste(ZM,"'",+v, theta,"'")))+
    ylab(expression(paste(hat(Z), hat(M),"'",+v, hat(theta),"'")))+
    theme(plot.title = element_text(hjust = 0.5))
  
  
  #Heatmaps
  # X
  p_X_heat = plot.heat(X) +
    ggtitle(expression(paste(ZM,"'",+v, theta,"'",+epsilon))) +
    theme(plot.title = element_text(hjust = 0.5))
  # X
  p_Xo_heat = plot.heat(X_o) +
    ggtitle(expression(paste(ZM,"'",+v, theta,"'",+epsilon))) +
    theme(plot.title = element_text(hjust = 0.5))
  # X_NE
  p_X_heat_NE = plot.heat(X_NoError) + 
    ggtitle(expression(paste(ZM,"'",+v, theta,"'"))) +
    theme(plot.title = element_text(hjust = 0.5))
  # X_recons
  p_Xrecons_heat = plot.heat(X_recons) +
    ggtitle(expression(paste(hat(Z), hat(M),"'",+v, hat(theta),"'")))+
    theme(plot.title = element_text(hjust = 0.5))
  # X diff
  p_Xdif_heat = plot.heat(X_recons-X_NoError) +
    ggtitle(expression(paste(hat(Z), hat(M),"'",+v, hat(theta),"'-",ZM,"'",+v, theta,"'")))+
    theme(plot.title = element_text(hjust = 0.5))
  # Z
  p_ZM_heat = plot.heat(Z%*%t(M)) +
    ggtitle(expression(paste(ZM,"'"))) +
    theme(plot.title = element_text(hjust = 0.5))
  # Z_recons
  p_ZMrecons_heat = plot.heat(t(FA$Ez)%*%t(FA$M)) +
    ggtitle(expression(paste(hat(Z), hat(M),"'"))) +
    theme(plot.title = element_text(hjust = 0.5))
  # Z_dif
  p_ZMdif_heat = plot.heat(t(FA$Ez)%*%t(FA$M)-Z%*%t(M)) +
    ggtitle(expression(paste(hat(Z), hat(M),"'-",ZM,"'"))) +
    theme(plot.title = element_text(hjust = 0.5))
  # E
  #p_e_heat = plot.heat(E_o) +
  p_e_heat = plot.heat(E) +
    ggtitle(expression(epsilon)) +
    theme(plot.title = element_text(hjust = 0.5))
  # E recons
  p_erecons_heat = plot.heat((X-X_recons)) +
    ggtitle(expression(hat(epsilon))) +
    theme(plot.title = element_text(hjust = 0.5))
  # E recons
  p_erecons_heat_o = plot.heat((X_o-X_recons_o)) +
    ggtitle(expression(hat(epsilon))) +
    theme(plot.title = element_text(hjust = 0.5))
  # E dif
  p_edif_heat = plot.heat((X-X_recons-E)) +
    ggtitle(expression(paste(hat(epsilon),"-",epsilon))) +
    theme(plot.title = element_text(hjust = 0.5))
  # E dif order
  p_edif_heat_o = plot.heat((X_o-X_recons_o-E)) +
    ggtitle(expression(paste(hat(epsilon),"-",epsilon))) +
    theme(plot.title = element_text(hjust = 0.5))
  # MM'+Sigma true
  if(varianceBE==TRUE){
    Psi_t = diag(apply(Psi,1,sum))
  }
  else{
    Psi_t = Psi
  }
  p_MM_heat = plot.heat(M%*%t(M)+Psi_t)
  # MM'+Sigma recons
  if(varianceBE==TRUE){
    Psi_rec = diag(apply(FA$Psi,1,sum))
  }
  else{
    Psi_rec = diag(FA$Psi)
  }
  p_MMrecons_heat = plot.heat(FA$M%*%t(FA$M)+Psi_rec)+
    theme(plot.title = element_text(hjust = 0.5))
  # MM'dif
  p_MMdif_heat = plot.heat(FA$M%*%t(FA$M)+Psi_rec-M%*%t(M)+Psi_t)+
    theme(plot.title = element_text(hjust = 0.5))
  return(list(like = p_l,
              prior = p_prior,
              post = p_post,
              all = p_all,
              ZM_scat = p_ZM,
              X_scat = p_X,
              X_scat_NE = p_X_NE,
              X_heat = p_X_heat,
              Xo_heat = p_Xo_heat,
              X_heat_NE = p_X_heat_NE,
              Xrecons_heat = p_Xrecons_heat,
              Xdif_heat = p_Xdif_heat,
              ZM_heat = p_ZM_heat,
              ZMrecons_heat = p_ZMrecons_heat,
              ZMdif_heat = p_ZMdif_heat,
              E_heat = p_e_heat,
              Erecons_heat = p_erecons_heat,
              Edif_heat = p_edif_heat,
              Erecons_heat_o = p_erecons_heat_o,
              Edif_heat_o = p_edif_heat_o,
              MM_heat = p_MM_heat,
              MMrecons_heat = p_MMrecons_heat,
              p_MMdif_heat = p_MMdif_heat))
}

