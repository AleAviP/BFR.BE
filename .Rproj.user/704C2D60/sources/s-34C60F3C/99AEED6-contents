######p=500####
###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(123)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset01")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset01.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(124)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset02")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset02.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(125)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset03")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset03.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(126)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset04")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset04.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(127)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset05")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset05.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(128)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset06")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset06.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(129)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset07")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset07.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(130)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset08")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset08.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(131)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset09")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset09.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(132)

N = 200
dd = 10
G = 500
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p500q10BEDataset10")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p500q10BEDataset10.RData")

######p=250####
###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(123)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset01")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset01.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(124)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset02")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset02.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(125)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset03")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset03.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(126)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset04")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset04.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(127)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset05")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset05.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(128)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset06")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset06.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(129)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset07")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset07.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(130)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset08")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset08.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(131)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset09")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p250q10BEDataset09.RData")

###1
rm(list=ls())
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/BE.BFA.EM/R/BFA.EM.BE.FUN.CV.V1.R")
source("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/faNPD.R")
library(mvtnorm)
library(partitions)
library(nloptr)
library(glmnet)
require(MASS)
require(psych)
require(matrixcalc)
require(Matrix)
require(plyr)
require(LaplacesDemon)
require(mnormt)
require(animation)
require(PMA)
require(sva)
require(cate)

set.seed(132)

N = 200
dd = 10
G = 250
Pv = 1
Pb = 2

X = rmvnorm(n = N, rep(0,dd), diag(dd))

#B<-matrix(runif(dd*G,-1,1),ncol=dd,nrow=G)
grid<-seq(-1,1,length.out=G)
#B<-sapply(1:dd,function(x) sample(grid))
B<-matrix(grid,ncol=dd,nrow=G)
rate<-trunc(G/(dd*2))
for(i in 2:dd){
  B[,i]<-grid[c((i*rate):G,1:(i*rate-1))]
}

length<-G

#myImagePlot(abs(B))

#Psi = diag(c(rep(.3,G/2),rep(1,G/2)),G)
Psi = diag(G)
#Psi = diag(c(rep(.5,G/2),G))
#Adding Mean batch and known covariates
W = matrix(ncol = Pv, nrow = N, runif(N*Pv,0,3))
#Theta = matrix(ncol=Pv,c(rep(-1,10),rep(1,10),rep(2,15),rep(0,5),rep(-3,4),rep(3,6),rep(-2,10)))
#Theta = matrix(ncol=Pv,c(rep(-0.25,10),rep(0.25,10)))
#Theta = matrix(ncol=Pv,c(rep(-1,round(G/2)),rep(1,G-round(G/2)),rep(1.5,round(3*G/4)),rep(0,G-round(3*G/4))))
Theta = matrix(ncol=Pv,c(rep(-2,round(G/2)),rep(2,G-round(G/2))))
batch = round(runif(N,0,1),0)
Z = matrix(ncol=Pb, c(batch,ifelse(batch==1,0,1)))
Beta = matrix(ncol=Pb, c(rep(2,G),rep(0,G)))

#Adding variance batch
Tau_inv = cbind(diag(Psi),diag(Psi)*1.5)
Er = matrix(ncol=G, nrow=N)
for (i in 1:N){
  if(i%%10==0){print(i)}
  Er[i,] = mvrnorm(1, rep(0,G), diag(c(Tau_inv %*% Z[i,]),G), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
}

Y = X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta)+Er

#Sigma<-B%*%t(B)+diag(G)

index.cv<-c(1:N)
group<-list()
for (i in 1:10){
  group[[i]]<-sample(index.cv,N/10,replace=FALSE)
  index.cv<-index.cv[!index.cv%in%group[[i]]]
}

####CV####
### pMOM
#No varimax
#10
resultpMOM_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#100
resultpMOM_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM")
}, .parallel = FALSE)

#Varimax
#10
resultpMOM_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#100
resultpMOM_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=TRUE)
}, .parallel = FALSE)

#Choosing the model
fnMOM10nr=mean(FN.CV.BE(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10r=mean(FN.CV.BE(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10nrjk=mean(FN.CV.BE.jk(resultpMOM_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnMOM10rjk=mean(FN.CV.BE.jk(resultpMOM_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
MOM_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM10r,fnMOM10rjk)<=min(fnMOM10nr,fnMOM10nrjk)))

fnMOM100nr=mean(FN.CV.BE(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100r=mean(FN.CV.BE(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100nrjk=mean(FN.CV.BE.jk(resultpMOM_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnMOM100rjk=mean(FN.CV.BE.jk(resultpMOM_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
MOM_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="N.MOM",varimax=(min(fnMOM100r,fnMOM100rjk)<=min(fnMOM100nr,fnMOM100nrjk)))

### Normal
#No varimax
#10
resultNormal_10_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#100
resultNormal_100_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal")
}, .parallel = FALSE)

#Varimax
#10
resultNormal_10_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#100
resultNormal_100_var_CV= llply(.data = 1:10, .fun = function(y){
  print(y)
  BFA.EM.BE(x=Y[-group[[y]],], v=W[-group[[y]],], b=Z[-group[[y]],], q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=TRUE)
}, .parallel = FALSE)

#Choosing a model
fnNormal10nr=mean(FN.CV.BE(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10r=mean(FN.CV.BE(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10nrjk=mean(FN.CV.BE.jk(resultNormal_10_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
fnNormal10rjk=mean(FN.CV.BE.jk(resultNormal_10_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,10)$X.test)
Normal_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal10r,fnNormal10rjk)<=min(fnNormal10nr,fnNormal10nrjk)))

fnNormal100nr=mean(FN.CV.BE(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100r=mean(FN.CV.BE(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100nrjk=mean(FN.CV.BE.jk(resultNormal_100_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
fnNormal100rjk=mean(FN.CV.BE.jk(resultNormal_100_var_CV,X=Y,V=W,B=Z,Z=X,M=B,group,100)$X.test)
Normal_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=100, epsM=0.05, prior="Normal",varimax=(min(fnNormal100r,fnNormal100rjk)<=min(fnNormal100nr,fnNormal100nrjk)))

#Flat
resultFlat_10=BFA.EM.BE(x=Y, v=W, b=Z, q = 10, eps = 0.001,it=100, epsM=0.05, prior="Flat")
resultFlat_100=BFA.EM.BE(x=Y, v=W, b=Z, q = 100, eps = 0.001,it=3, epsM=0.05, prior="Flat")

###COMBAT
mod_COMBAT <- model.matrix(~W, data=data.frame(Y))
COMBAT <- ComBat(dat=t(Y), batch=Z[,1], mod=mod_COMBAT)
cov_COMBAT = cov(COMBAT)

COMBAT_10 = fa.em(COMBAT,10,tol=0.001, maxiter = 100)
COMBAT_100 = fa.em(COMBAT,99,tol=0.001, maxiter = 100)

#Table
q.sim=data.frame(Flat_S=100,
                 Normal_S=100,
                 MOM_S=100,
                 COMBAT_S=100,
                 Flat_NS=10,
                 Normal_NS=10,
                 MOM_NS=10,
                 COMBAT_NS=10)

q.hat.2=data.frame(Flat_S=sum(resultFlat_100$gTheta!=0),
                   Normal_S=sum(apply(Normal_100$gamma>0.5,2,sum)!=0),
                   MOM_S=sum(apply(MOM_100$gamma>0.5,2,sum)!=0),
                   COMBAT_S=100,
                   Flat_NS=sum(resultFlat_10$gTheta!=0),
                   Normal_NS=sum(apply(Normal_10$gamma>0.5,2,sum)!=0),
                   MOM_NS=sum(apply(MOM_10$gamma>0.5,2,sum)!=0),
                   COMBAT_NS=10)

m.hat.2=data.frame(Flat_S=G,
                   Normal_S=sum(Normal_100$gamma>0.5)/10,
                   MOM_S=sum(MOM_100$gamma>0.5)/10,
                   COMBAT_S=G,
                   Flat_NS=G,
                   Normal_NS=sum(Normal_10$gamma>0.5)/10,
                   MOM_NS=sum(MOM_10$gamma>0.5)/10,
                   COMBAT_NS=G)

FN.2=data.frame(Flat_S=FNorm(resultFlat_100$Ez,resultFlat_100$M,X,B),
                Normal_S=ifelse(min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk),
                                FNorm(Normal_100$Ez,PostM2(Normal_100),X,B),
                                FNorm(Normal_100$Ez,PostM(Normal_100),X,B)),
                MOM_S=ifelse(min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk),
                             FNorm(MOM_100$Ez,PostM2(MOM_100),X,B),
                             FNorm(MOM_100$Ez,PostM(MOM_100),X,B)),
                COMBAT_S=norm(t(COMBAT_100$Z%*%t(COMBAT_100$Gamma))-X%*%t(B),type ="F"),
                Flat_NS=FNorm(resultFlat_10$Ez,resultFlat_10$M,X,B),
                Normal_NS=ifelse(min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk),
                                 FNorm(Normal_10$Ez,PostM2(Normal_10),X,B),
                                 FNorm(Normal_10$Ez,PostM(Normal_10),X,B)),
                MOM_NS=ifelse(min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk),
                              FNorm(MOM_10$Ez,PostM2(MOM_10),X,B),
                              FNorm(MOM_10$Ez,PostM(MOM_10),X,B)),
                COMBAT_NS=norm(t(COMBAT_10$Z%*%t(COMBAT_10$Gamma))-X%*%t(B),type ="F"))

FN.x=data.frame(Flat_S=FNormXhat(resultFlat_100,X,W,Z,Theta,Beta,B),
                Normal_S=FNormXhat(Normal_100,X,W,Z,Theta,Beta,B,
                                   min(fnNormal100nr,fnNormal100r)<=min(fnNormal100nrjk,fnNormal100rjk)),
                MOM_S=FNormXhat(MOM_100,X,W,Z,Theta,Beta,B,
                                min(fnMOM100nr,fnMOM100r)<=min(fnMOM100nrjk,fnMOM100rjk)),
                COMBAT_S=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"),
                Flat_NS=FNormXhat(resultFlat_10,X,W,Z,Theta,Beta,B),
                Normal_NS=FNormXhat(Normal_10,X,W,Z,Theta,Beta,B,
                                    min(fnNormal10nr,fnNormal10r)<=min(fnNormal10nrjk,fnNormal10rjk)),
                MOM_NS=FNormXhat(MOM_10,X,W,Z,Theta,Beta,B,
                                 min(fnMOM10nr,fnMOM10r)<=min(fnMOM10nrjk,fnMOM10rjk)),
                COMBAT_NS=norm(t(COMBAT)-X%*%t(B)+W%*%t(Theta)+Z%*%t(Beta),type ="F"))


it=data.frame(Flat_S=resultFlat_100$iterations,
              Normal_S=Normal_100$iterations,
              MOM_S=MOM_100$iterations,
              COMBAT_S=COMBAT_100$niter,
              Flat_NS=resultFlat_10$iterations,
              Normal_NS=Normal_10$iterations,
              MOM_NS=MOM_10$iterations,
              COMBAT_NS=COMBAT_10$niter)

tableFN=rbind.data.frame(q_star=q.sim,q_hat=q.hat.2,Mhat=m.hat.2,FN_ZM2=FN.2,FN_X=FN.x,it=it)
round(t(tableFN),1)
write.csv(round(t(tableFN),1), file = "/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/Table1806FixMn100p250q10BEDataset10")
save.image("/Users/alejandra/Dropbox/OxWaSP/Programing/BFA/Examples/Paper1806/1806FixMn100p20q10BEDataset10.RData")
